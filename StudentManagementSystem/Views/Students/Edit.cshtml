@model StudentManagementSystem.Models.Student
@using StudentManagementSystem.Models


@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Student</h4>
<hr />




<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="StudentId" />

            <div class="form-group">
                <label asp-for="FullName" class="control-label"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control" type="date" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Gender" class="control-label"></label>
                @Html.DropDownListFor(model => model.Gender, (List<SelectListItem>)ViewBag.GenderList, "-- Select Gender --", new { @class = "form-control" })
                <small class="form-text text-muted">Current: @StudentManagementSystem.Helpers.EnumHelper.GetDisplayName(Model.Gender)</small>
                <span asp-validation-for="Gender" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label for="ProfileImage" class="control-label">Profile Picture</label>
                <input type="file" name="ProfileImage" id="ProfileImage" class="form-control" accept="image/*" />
                <small class="form-text text-muted">Accepted formats: JPG, PNG, GIF. Max size: 5MB</small>
                @if (!string.IsNullOrEmpty(Model.ProfilePicture))
                {
                    <div class="mt-2">
                        <img src="@Url.Content(Model.ProfilePicture)" alt="Current Profile Picture" width="100" height="100" class="img-thumbnail" />
                        <p class="text-muted small">Current: @Model.ProfilePicture</p>
                    </div>
                }
            </div>

            <div class="form-group mt-3">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    
    <script>
        // File upload validation
        document.getElementById('ProfileImage').addEventListener('change', function(e) {
            const file = e.target.files[0];
            const maxSize = 5 * 1024 * 1024; // 5MB
            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
            
            if (file) {
                // Check file size
                if (file.size > maxSize) {
                    alert('File size must be less than 5MB');
                    this.value = '';
                    return;
                }
                
                // Check file type
                if (!allowedTypes.includes(file.type)) {
                    alert('Please select a valid image file (JPG, PNG, GIF)');
                    this.value = '';
                    return;
                }
            }
        });
        
        // Debug form submission
        document.querySelector('form').addEventListener('submit', function(e) {
            const genderSelect = document.getElementById('Gender');
            console.log('Form submitting with Gender value:', genderSelect.value);
            console.log('Form data:', new FormData(this));
        });
        
        // Debug form load
        document.addEventListener('DOMContentLoaded', function() {
            const genderSelect = document.getElementById('Gender');
            console.log('Form loaded with Gender value:', genderSelect.value);
            console.log('Available options:', Array.from(genderSelect.options).map(opt => opt.value));
        });
    </script>
}
